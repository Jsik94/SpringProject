<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently servㅇing up static resources in the ${webappRoot}/resources directory -->
	
		<!-- <default-servlet-handler/> 태그 미사용시 
		방법1] wepapp/reosurces디렉토리에만 스태틱 리소스를 넣거나 
		방법2] wepapp아래 리소스 종류별로 디렉토리 생성후 
		<resources mapping="/접근URL/**" location="/디렉토리명/" 
		/>식으로 계속 추가해 주어야한다. 
		방법3] <default-servlet-handler/>태그 추가 
		-->
		
	<!--방법1] -->
	<!--  
		mapping 속성 : HTML에서 경로지정시 사용할 가상의 이름 
		location:wepapp아래의 실제 디렉토리 경로 -->
	<!--  
	<resources mapping="/resources/**" location="/resources/" />
	resources 매핑이름을 static으로 변경 링크 걸때는 static으로 경로지정
	<resources mapping="/static/**" location="/resources/" />
	-->
	<!-- 방법2] -->
	<!--  
	<resources location="/images/" mapping="/images/**"/>
	<resources location="/styles/" mapping="/styles/**"/>
	-->
	<!-- 방법3] webapp아래 아무곳이나 폴더를 만들어 리소스를 두도록 설정 추가 -->
	<!-- webapp의 어느 디렉토리에 스태틱 리소스(이미지,.css,.js등)를 두더라도 읽어 올수 있도록 설정하는 부분 -->
	<!-- 서버의 디렉토리 구조대로 접근 -->
	<default-servlet-handler/>
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	

	<!-- 핸들러 스캔 없으면 자동생성이안됨-->
	  
	<context:component-scan base-package="com.kosmo.springapp" />
	
	<!-- 
		기본 핸들러 매핑 
		class 속성 필수 name 속성 불필요
		요청과 매핑은 클래스 어노테이션으로 매핑하면됨 
		
		메소드에서 mapping이없으면 name으로 쓰것지 
	 -->
	<!--  
	 <beans:bean class ="com.kosmo.springapp.IndexController"/>
	 <beans:bean class ="com.kosmo.springapp.HomeController"/>
	  -->
	
	<!-- 원칙: .do요청과 매핑된 클래스는 bean설정 파일에 하나만 등록 가능 여러개 동시 등록시 "There is already
		handler of type 컨트롤러클래스 mapped" 에러 발생 단, .do 요청과 매핑을 하지 않은 기타 클래스는 여러개 등록
		가능 -->
	<!-- BeanNameUrlHandlerMapping -->
	<!--
		-기본 핸들러 매핑
		-빈의 이름에 지정한 요청명(URL패턴)과 컨트롤러 클래스를 매핑
		 bean엘리먼트의
		 name속성에 컨텍스트
		 루트를 제외한 경로 지정(반드시 /부터)
		 class속성에는 요청을 처리할 컨트롤러 클래스 지정 -->
		 
	<beans:bean name="/HandlerMapping/BeanNameUrl.do" class="com.kosmo.springapp.basic.handlermapping.BeanNameUrlController"/>
	
	<!-- 
		기본 핸들러 매핑이 아닌와중에
		하나의 섹션안에서 유사한 요청이 있을 경우 아래와 같이씀
		SimpleURLHandlerMapping이 일단 매핑한다.
		단, 우선순위를 설정해주지 않으면 찾아주질 못하므로 order 지정을 반드시 지정해야한다.
		
		property key: 요청명 으로 지정하고 태그 사이엔 id 값을 넣음
		
		bean에서는 id 값으로 요청명을 파싱함
	 -->
	<beans:bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<beans:property name="order" value="1"/> <!-- 핸들러 매핑사이의 우선순위를 반드시 지정해줘야한다. -->
		<beans:property name="mappings">
			<beans:props>
				<beans:prop key="/HandlerMapping/SimpleUrlFirst.do">first</beans:prop>
				<beans:prop key="/HandlerMapping/SimpleUrlSecond.do">second</beans:prop>
			</beans:props>
		</beans:property>	
	</beans:bean>
	
	<!-- 기본생성자로 생성하는것과 같은 코드   
	SimpleUrlFirstController first = new SimpleUrlFirstController();
	id값이 없으면 그냥 익명생성과같음
	-->
	<beans:bean id="first" class="com.kosmo.springapp.basic.handlermapping.SimpleUrlFirstController"/>
	<beans:bean id="second" class="com.kosmo.springapp.basic.handlermapping.SimpleUrlSecondController"/>
	
	<!-- 
		※사용자 요청과 매핑이 안된 컨트롤러 계열이 아닌 클래스는 여러개의 빈을 등록 가능,
		단, 사용자 요청을 처리하는 컨트롤러 클래스는 하나의 빈만 등록가능(모호성 배제)
		순서가 다르고 생성자에서 사용유무를 잘확인하자
		@Autowired : 타입 -> id ->Qualifier  (속성 세터에 모두 붙일 수 있음)
		@Resource: id -> 타입 -> Qualifier (생성자를 제외한 세터 속성에 붙일 수 있음)
		
		생성자 인젝션 및 세터 인젝션시 객체면 ref
		기본 타입이나 String면 value
		
		bean 등록시 id속성을 인스턴스 변수라 보면됨
		다른빈에서 참조할때 사용된다 ( 참조시엔 ref로)
		
		매개변수명괴 id 값을 맞추면된다
	 -->
	 
	 <!-- 타입이 같은것이 여러개면 qualifier 붙이는게 좋음 그래야 안헷갈리지 -->
	 <!-- controller 가 아니므로 여러개 생성할 수 있다. -->
	 <beans:bean id="personType" class="com.kosmo.springapp.basic.injection.Person">
	 <!-- 인덱스가 없으면 순차적으로 파라미터가 매핑됨 -->
		<beans:qualifier value="person1" />
	 	<beans:constructor-arg index="0"  value="한소인"/>
	 	<beans:constructor-arg index="1"  value="가산동"/>
	 	<beans:constructor-arg index="2"  value="20"/>
	 </beans:bean>
	 
	 <!-- 단, id 값이 없는 경우에 생성자 파라미터로 같은 bean을 여러개 생성하면 모호성으로 인해 오류남 -->
	 <beans:bean  id="personIndex" class="com.kosmo.springapp.basic.injection.Person">
	 <!-- 순차적으로 파라미터가 매핑됨 -->
		<beans:qualifier  value="person2" /><!-- qualifier 태그의 변수명은 자유롭게 나중어 어노테이션이랑 매핑만되면됨 -->
	 	<beans:constructor-arg type="java.lang.String" value="가길동"/>
	 	<beans:constructor-arg type="java.lang.String" value="청담동"/>
	 	<beans:constructor-arg type="int" value="29"/>
	 </beans:bean>
	 
	 <!-- 빈생성하면 반드시 컨트롤러가 생겨버림 @controller랑 곂쳐서 문제가발생할 수 있음 -->
	 <!-- 
		 <beans:bean class="com.kosmo.springapp.basic.injection.ConstructorController">
		 	<beans:constructor-arg index="0" ref="personType" />
		 	<beans:constructor-arg index="1" ref="personIndex" />
		 </beans:bean>
	  -->
	 <!-- [세터를 통한 주입] -->
	 <!-- property태그를 이용해서 중비하거나 p접두어 사용해서 주입 -->
	 <!-- 기본자료형 or String은 변수명 ,참조형은 ref가 붙은것 -->
	 <!-- 해당 객체에 setter가 반드시 있어야 p 태그가먹음! -->
	 <!-- InjectionController에 주입용 Person 객체  -->
	 
	 <beans:bean p:addr="청학동" p:age="59" id = "personArgs" class ="com.kosmo.springapp.basic.injection.Person">
	 	<beans:property name="name" value="김길규"/>
	 </beans:bean>
	 
	<beans:bean id = "personDefualt" class ="com.kosmo.springapp.basic.injection.Person"/>
	
	
	<!-- Chap06 annotation auto wired 용 -->
	<!-- DI와 관련된 어노테이션을 테스트하기 위한 빈 등록 -->
	<beans:bean id="fCommand" p:name="가길동" p:years="20" class="com.kosmo.springapp.basic.annotation.Command">
		<beans:qualifier value="fCommand"/>
	</beans:bean>
	
	<beans:bean id="sCommand" class="com.kosmo.springapp.basic.annotation.Command">
		<beans:qualifier value="sCommand"/>
		<beans:property name="name" value="나길동"/>
		<beans:property name="years" value="32" />
	</beans:bean>
	
	
	<!-- Chap08 properties를 읽어오는 placeholder 등록 -->
	<!--
	  [리소스파일에 등록한 키값 사용하기]
	  -설정파일(XML)에서 EL표현식을 사용해서 읽을 수 있다.
	    단,EL식 사용시 빈 공백 없어야 한다 ${키값 }[X]
	  
	  1]src밑에 파일명.properties파일 생성(파일명은 임의로)
	  2]빈 설정파일에 PropertyPlaceholderConfigurer를
	    등록하거나 property-placeholder를 context접두어 등록
	   
	    1]에서등록한 리소스파일의 위치를
	    locations혹은 location(property-placeholder일때)
	        속성을 통해서 설정해 준다
	   
	  3]빈 설정 파일에 등록한 빈에 키값을 주입하기 위해
	    setter인젝션 사용.
	        값 설정시에는 EL식으로(단, 공백 없어야 함)
	 -->
	 
	 <!-- 다음형식으로 보내야됨 classpath: -->
	<context:property-placeholder location="classpath:resc.properties,classpath:sub/resc.properties,classpath:onememo/mybatis/mapper/onememo.properties"/>
	
	
	<beans:bean p:user="${name}" p:pass="${pass}" p:name="${name}" class="com.kosmo.springapp.basic.resource.UserCommand"/>
	
	
	<!-- validator 등록 -->
	
	<beans:bean class ="com.kosmo.springapp.basic.validation.FormValidator"/>
	<!-- 
		에러메세지를 출력하기 위해서는 해당 빈을 등록해야한다.
		id값은 내부적으로 프레임워크가 messageSource로 사용하므로 id 값을 반드시 이걸로 지정해야한다.
	 -->
	 
	<beans:bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
	<!-- 
 		 src 밑이나 WEB-INF 밑에 에러메시지를 저장한 
		 properties파일명(확장자를 생략한) 
		 
		 키값=에러메시지
		 
		 키값은   에러코드.커맨드객체명.속성 = 에러 내용
 				 단,커맨드 객체명은 소문자로
		 
		 에러코드는 rejectValue("속성","에러코드")에 설정한
		 에러코드값
		 예]nameError.formCommand.name
		 -->
		<beans:property name="basenames">
			<beans:list>
				<!-- properties 경로는 여기에 삽입 -->
				<beans:value>com/kosmo/springapp/basic/validation/ErrorMessage</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	<context:property-placeholder />
	
</beans:beans>
